generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String // Store hashed passwords
  fullName          String
  phoneNumber       String?   @unique
  dateOfBirth       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isVerified        Boolean   @default(false) // For email verification
  isBlocked         Boolean   @default(false) // To block suspicious accounts
  role              UserRole  @default(USER) // User role (USER, ADMIN, etc.)
  dailyPaymentLimit Int       @default(5)

  walletId String? @unique @db.ObjectId

  wallet       Wallet?       @relation(fields: [walletId], references: [id])
  bankAccounts BankAccount[] // Relation to bank accounts owned by the user
  transactions Transaction[] // Relation to transactions made by the user
  paymentLogs  PaymentLog[] // Relation to payment logs made by the user
  ipList       IPlist[] // Relation to IP list entries
  Session      Session?
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  balance   Float    @default(0.0)
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // isInProcess Boolean  @default(false)

  User        User?
  Transaction Transaction[]
}

model Transaction {
  id            String   @id @default(uuid()) @map("_id")
  walletId      String   @db.ObjectId
  userId        String?  @db.ObjectId
  bankAccountId String   @unique @db.ObjectId
  type          String //Money deposit withdraw transfer
  amount        Float
  status        String // SUCCESS PENDING FAILED CANCELLED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?

  BankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])
  PaymentLog  PaymentLog? //Transaction can exist without log, but the log cannot be created without transactionId to refer to it
  Wallet      Wallet       @relation(fields: [walletId], references: [id])
  User        User?        @relation(fields: [userId], references: [id])
}

model PaymentLog {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  transactionId     String?  @unique
  amount            Float
  timestamp         DateTime @default(now())
  status            String
  statusDescription String?

  User        User         @relation(fields: [userId], references: [id])
  Transaction Transaction? @relation(fields: [transactionId], references: [id])
}

model BankAccount {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  cardName   String
  cardNumber String @unique
  iban       String @unique
  expiryDate String
  cvv        Int

  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction? @relation
}

model IPlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  ipAddress String   @unique
  addedAt   DateTime @default(now())
  isBlocked Boolean  @default(false)
  isActive  Boolean  @default(false)

  user User? @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  expires      DateTime
  sessionToken String   @unique

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentType {
  PAYMENT
  WITHDRAW
  TRANSFER
}

//? How to establish user & wallet & transaction relation
//? Should we have a user & transaction relation, or should this relation be only between wallet and transaction, since there is already a 1-1 relation between user and wallet
